//
//  RangersAPM+NetworkCustom.h
//  HeimdallrFinder
//
//  Created by xuminghao.eric on 2023/8/30.
//

#import <APMPlus_Public/RangersAPM.h>

NS_ASSUME_NONNULL_BEGIN

@interface RangersAPMNetworkRecord : NSObject

/**
 URL is the URL for the request.
 */
@property (atomic, strong) NSURL *URL;

/**
 method is the HTTP request method of the receiver.
 */
@property (atomic, nullable, strong) NSString *HTTPMethod;

/**
 networkProtocolName is the network protocol used to fetch the resource, as identified by the ALPN Protocol ID Identification Sequence [RFC7301].
 */
@property (atomic, nullable, strong) NSString *networkProtocolName;

/**
 requestBytes is the count of the source bytes that the user agent requested from the server or local resources.
 */
@property (nonatomic, assign) int64_t requestBytes;

/**
 requestHeaderFields is a dictionary containing all the HTTP header fields of the
 request.
 */
@property (atomic, nullable, copy) NSDictionary *requestHeaderFields;

/**
 statusCode is the HTTP status code of the receiver.
 */
@property (nonatomic, assign) NSInteger statusCode;

/**
 responseBytes is the count of the response bytes that the user agent received from the server or from local resources.
 */
@property (nonatomic, assign) int64_t responseBytes;

/**
 responseHeaderFields is a dictionary containing all the HTTP header fields
 of the response.
 */
@property (atomic, nullable, copy) NSDictionary *responseHeaderFields;

/**
 error may be nil, which implies that no error occurred and this task is complete.
 */
@property (atomic, nullable, strong) NSError *error;

/**
 stack is the calling stack when an error occurred during the task.
 */
@property (atomic, nullable, strong) NSString *stack;

/**
 reusedConnection indicates whether a persistent connection was used to fetch the resource. The default value is NO.
 */
@property (nonatomic, assign) BOOL reusedConnection;

/**
 proxyConnection indicates whether a proxy connection was used to fetch the resource. The default value is NO.
 */
@property (nonatomic, assign) BOOL proxyConnection;

/**
 startTimestamp is the timestamp when the user agent started fetching the resource, whether or not the resource was retrieved from the server or local resources. The value should be generated by [[NSDate date] timeIntervalSince1970].
 */
@property (nonatomic, assign) NSTimeInterval startTimestamp;

/**
 endTimestamp is the timestamp immediately after the user agent received the last byte of the resource. The value should be generated by [[NSDate date] timeIntervalSince1970].
 */
@property (nonatomic, assign) NSTimeInterval endTimestamp;

/**
 dnsTime is the millisecond time consuming of the user agent looked up the name for the resource
 */
@property (nonatomic, assign) int64_t dnsTime;

/**
 connectTime is the millisecond time consuming of the user agent established the connection to the server.
 */
@property (nonatomic, assign) int64_t connectTime;

/**
 tcpTime is the millisecond time consuming of three-way handshake between the user agent and the server.
 */
@property (nonatomic, assign) int64_t tcpTime;

/**
 sslTime is the millisecond time consuming of the user agent secured the current connection by security handshake if an encrypted connection was used.
 */
@property (nonatomic, assign) int64_t sslTime;

/**
 sendTime is the millisecond time consuming of the user agent requested the source from the server or local resources.
 */
@property (nonatomic, assign) int64_t sendTime;

/**
 waitTime is the millisecond time duration between the user agent finished requested the source and has not received the first byte of the response from the server or from local resources.
 */
@property (nonatomic, assign) int64_t waitTime;

/**
 receiveTime is the millisecond time consuming of the user agent received the response from the server or from local resources.
 */
@property (nonatomic, assign) int64_t receiveTime;

/**
 remoteHost is the IP address string of the remote interface for the connection.
 */
@property (atomic, nullable, copy) NSString *remoteHost;

/**
 remotePort is the port string of the remote interface for the connection.
 */
@property (atomic, nullable, copy) NSString *remotePort;

/**
 isBackground indicates whether the applicaiton is in the background status when the request started. The default value is NO.
 */
@property (nonatomic, assign) BOOL isBackground;

/**
 @abstract Generate a record with URL.
 @param URL The URL for the request.
 @result A newly-created RangersAPMNetworkRecord instance. A nil URL param will result in a nil RangersAPMNetworkRecord instance.
 */
+ (nullable instancetype)recordWithURL:(NSURL *)URL;

- (id)init __attribute__((unavailable("please use recordWithURL:")));
+ (instancetype)new __attribute__((unavailable("please use recordWithURL:")));

@end

@interface RangersAPM (NetworkCustom)

/**
 @abstract Record a custom network log.
 @param record A user generated RangersAPMNetworkRecord instance.
 */
+ (void)recordNetworkLog:(RangersAPMNetworkRecord *)record;

@end

NS_ASSUME_NONNULL_END
